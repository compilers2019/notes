UNIT OberonS;
(* Scanner generated by Coco/R (Pascal version) *)

INTERFACE

CONST
  CommentMax = 10000;
TYPE
  CommentStr = ARRAY [0 .. CommentMax] OF CHAR;
VAR
  src:         FILE;         (*source/list files. To be opened by the main pgm*)
  lst:         TEXT;
  directory:   STRING;       (*of source file*)
  line, col:   INTEGER;      (*line and column of current symbol*)
  len:         LONGINT;      (*length of current symbol*)
  pos:         LONGINT;      (*file position of current symbol*)
  nextLine:    INTEGER;      (*line of lookahead symbol*)
  nextCol:     INTEGER;      (*column of lookahead symbol*)
  nextLen:     LONGINT;      (*length of lookahead symbol*)
  nextPos:     LONGINT;      (*file position of lookahead symbol*)
  errors:      INTEGER;      (*number of detected errors*)
  seenComment: BOOLEAN;      (*TRUE if comments have been registered*)
  Error:       PROCEDURE (nr, line, col: INTEGER; pos: LONGINT);

PROCEDURE Get (VAR sym: INTEGER);
(* Gets next symbol from source file *)

PROCEDURE GetString (pos: LONGINT; len: INTEGER; VAR s: STRING);
(* Retrieves exact string of max length len from position pos in source file *)

PROCEDURE GetName (pos: LONGINT; len: INTEGER; VAR s: STRING);
(* Retrieves name of symbol of length len at position pos in source file *)

FUNCTION CharAt (pos: LONGINT): CHAR;
(* Returns exact character at position pos in source file *)

PROCEDURE GetComment (VAR comment: CommentStr; pos: INTEGER; VAR length: INTEGER);
(* IF seenComment
     THEN concatenates and extracts previously scanned comments into comment,
          starting at comment[pos], and computes length; seenComment := FALSE
     ELSE returns length := 0 *)

PROCEDURE _Reset;
(* Reads and stores source file internally *)

IMPLEMENTATION

CONST
  no_Sym = 64; (*error token code*)
  (* not only for errors but also for not finished states of scanner analysis *)
  eof = #26; (*MS-DOS eof*)
  LF  = #10;
  CR  = #13;
  EF  = #0;
  EL  = CR;
  BlkSize = 16384;
TYPE
  BufBlock   = ARRAY [0 .. BlkSize-1] OF CHAR;
  Buffer     = ARRAY [0 .. 31] OF ^BufBlock;
  StartTable = ARRAY [0 .. 255] OF INTEGER;
  GetCH      = FUNCTION (pos: LONGINT) : CHAR;
  CommentPtr = ^ CommentRec;
  CommentRec = RECORD
                 begCom, endCom : LONGINT;
                 next : CommentPtr;
               END;
VAR
  lastCh,
  ch:        CHAR;       (*current input character*)
  curLine:   INTEGER;    (*current input line (may be higher than line)*)
  lineStart: LONGINT;    (*start position of current line*)
  apx:       LONGINT;    (*length of appendix (CONTEXT phrase)*)
  oldEols:   INTEGER;    (*number of _EOLs in a comment*)
  bp, bp0:   LONGINT;    (*current position in buf
                           (bp0: position of current token)*)
  LBlkSize:  LONGINT;    (*BlkSize*)
  inputLen:  LONGINT;    (*source file size*)
  buf:       Buffer;     (*source buffer for low-level access*)
  start:     StartTable; (*start state for every character*)
  CurrentCh: GetCH;
  firstComment, lastComment: CommentPtr;

PROCEDURE Err (nr, line, col: INTEGER; pos: LONGINT); FAR;
  BEGIN
    INC(errors)
  END;

PROCEDURE NextCh;
(* Return global variable ch *)
  BEGIN
    lastCh := ch; INC(bp); ch := CurrentCh(bp);
    IF (ch = EL) OR (ch = LF) AND (lastCh <> EL) THEN BEGIN
      INC(curLine); lineStart := bp
    END
  END;

FUNCTION Comment: BOOLEAN;
  LABEL
    999;
  VAR
    level, startLine: INTEGER;
    oldLineStart : LONGINT;
    beginC, endC : LONGINT;
    nextComment : CommentPtr;
  BEGIN
    beginC := bp;
    level := 1; startLine := curLine; oldLineStart := lineStart;
    IF (ch = '(') THEN BEGIN
      NextCh;
      IF (ch = '*') THEN BEGIN
        NextCh;
        WHILE TRUE DO BEGIN
          IF (ch = '*') THEN BEGIN
            NextCh;
            IF (ch = ')') THEN BEGIN
              DEC(level); NextCh;
              IF level = 0 THEN BEGIN Comment := TRUE; GOTO 999; END
            END
          END ELSE IF (ch = '(') THEN BEGIN
            NextCh;
            IF (ch = '*') THEN BEGIN INC(level); NextCh END
          END ELSE IF ch = EF THEN BEGIN Comment := FALSE; GOTO 999; END
          ELSE NextCh;
        END; (* WHILE TRUE *)
      END ELSE BEGIN
        IF (ch = CR) OR (ch = LF) THEN BEGIN
          DEC(curLine); lineStart := oldLineStart
        END;
        DEC(bp); ch := lastCh; Comment := FALSE;
      END;
    END;
    
    Comment := FALSE;
    999:
    endC := bp; DEC(endC);
    IF endC > beginC THEN BEGIN
      seenComment := TRUE;
      NEW(nextComment);
      nextComment^.begCom := beginC;
      nextComment^.endCom := endC;
      nextComment^.next := NIL;
      IF firstComment = NIL
        THEN firstComment := nextComment
        ELSE lastComment^.next := nextComment;
      lastComment := nextComment
    END
  END;

PROCEDURE GetComment (VAR comment: CommentStr; pos: INTEGER; VAR length: INTEGER);
  VAR
    this : CommentPtr;
  BEGIN
    length := 0;
    WHILE firstComment <> NIL DO BEGIN
      this := firstComment;
      WHILE (pos + length <= CommentMax) AND (this^.begCom <= this^.endCom) DO
        BEGIN
          comment[pos + length] := CharAt(this^.begCom);
          INC(length); INC(this^.begCom);
        END;
      firstComment := firstComment^.next;
      DISPOSE(this)
    END;
    seenComment := FALSE;
  END;

PROCEDURE Get (VAR sym: INTEGER);
  VAR
    state: INTEGER;

  FUNCTION Equal (s: STRING): BOOLEAN;
    VAR
      i: INTEGER;
      q: LONGINT;
    BEGIN
      IF nextLen <> Length(s) THEN BEGIN Equal := FALSE; EXIT END;
      i := 1; q := bp0;
      WHILE i <= nextLen DO BEGIN
        IF CurrentCh(q) <> s[i] THEN BEGIN Equal := FALSE; EXIT END;
        INC(i); INC(q)
      END;
      Equal := TRUE
    END;

  PROCEDURE CheckLiteral;
    BEGIN
      CASE CurrentCh(bp0) OF
        'A': IF Equal('ARRAY') THEN BEGIN sym := 62; 
             END;
        'B': IF Equal('BEGIN') THEN BEGIN sym := 7; 
             END;
        'C': IF Equal('CASE') THEN BEGIN sym := 50; 
             END ELSE IF Equal('CONST') THEN BEGIN sym := 59; 
             END;
        'D': IF Equal('DIV') THEN BEGIN sym := 35; 
             END ELSE IF Equal('DO') THEN BEGIN sym := 54; 
             END;
        'E': IF Equal('ELSE') THEN BEGIN sym := 49; 
             END ELSE IF Equal('ELSIF') THEN BEGIN sym := 48; 
             END ELSE IF Equal('END') THEN BEGIN sym := 8; 
             END ELSE IF Equal('EXIT') THEN BEGIN sym := 44; 
             END;
        'I': IF Equal('IF') THEN BEGIN sym := 46; 
             END ELSE IF Equal('IMPORT') THEN BEGIN sym := 63; 
             END ELSE IF Equal('IN') THEN BEGIN sym := 27; 
             END ELSE IF Equal('IS') THEN BEGIN sym := 28; 
             END;
        'L': IF Equal('LOOP') THEN BEGIN sym := 57; 
             END;
        'M': IF Equal('MOD') THEN BEGIN sym := 36; 
             END ELSE IF Equal('MODULE') THEN BEGIN sym := 9; 
             END;
        'N': IF Equal('NIL') THEN BEGIN sym := 37; 
             END;
        'O': IF Equal('OF') THEN BEGIN sym := 51; 
             END ELSE IF Equal('OR') THEN BEGIN sym := 38; 
             END;
        'P': IF Equal('POINTER') THEN BEGIN sym := 16; 
             END ELSE IF Equal('PROCEDURE') THEN BEGIN sym := 18; 
             END;
        'R': IF Equal('RECORD') THEN BEGIN sym := 13; 
             END ELSE IF Equal('REPEAT') THEN BEGIN sym := 55; 
             END ELSE IF Equal('RETURN') THEN BEGIN sym := 45; 
             END;
        'T': IF Equal('THEN') THEN BEGIN sym := 47; 
             END ELSE IF Equal('TO') THEN BEGIN sym := 17; 
             END ELSE IF Equal('TYPE') THEN BEGIN sym := 60; 
             END;
        'U': IF Equal('UNTIL') THEN BEGIN sym := 56; 
             END;
        'V': IF Equal('VAR') THEN BEGIN sym := 61; 
             END;
        'W': IF Equal('WHILE') THEN BEGIN sym := 53; 
             END ELSE IF Equal('WITH') THEN BEGIN sym := 58; 
             END;
      ELSE BEGIN END
      END
    END;

  BEGIN (*Get*)
    WHILE (ch = ' ') OR
          ((ch >= CHR(9)) AND (ch <= CHR(13))) DO NextCh;
    IF ((ch = '(')) AND Comment THEN BEGIN Get(sym); EXIT; END;
    pos := nextPos;   nextPos := bp;
    col := nextCol;   nextCol := bp - lineStart;
    line := nextLine; nextLine := curLine;
    len := nextLen;   nextLen := 0;
    apx := 0; state := start[ORD(ch)]; bp0 := bp;
    WHILE TRUE DO BEGIN
      NextCh; INC(nextLen);
      CASE state OF
         1: IF ((ch >= '0') AND (ch <= '9') OR
               (ch >= 'A') AND (ch <= 'Z') OR
               (ch >= 'a') AND (ch <= 'z')) THEN BEGIN 
            END ELSE BEGIN sym := 1; CheckLiteral; EXIT; END;
         2: BEGIN sym := 2; EXIT; END;
         3: IF ((ch >= '0') AND (ch <= '9')) THEN BEGIN 
            END ELSE IF ((ch >= 'D') AND (ch <= 'E')) THEN BEGIN state := 4; 
            END ELSE BEGIN sym := 3; EXIT; END;
         4: IF ((ch >= '0') AND (ch <= '9')) THEN BEGIN state := 6; 
            END ELSE IF ((ch = '+') OR
                  (ch = '-')) THEN BEGIN state := 5; 
            END ELSE BEGIN sym := no_Sym; EXIT; END;
         5: IF ((ch >= '0') AND (ch <= '9')) THEN BEGIN state := 6; 
            END ELSE BEGIN sym := no_Sym; EXIT; END;
         6: IF ((ch >= '0') AND (ch <= '9')) THEN BEGIN 
            END ELSE BEGIN sym := 3; EXIT; END;
         7: BEGIN sym := 4; EXIT; END;
         8: IF ((ch <= CHR(9)) OR
               (ch >= CHR(11)) AND (ch <= '!') OR
               (ch >= '#')) THEN BEGIN 
            END ELSE IF (ch = '"') THEN BEGIN state := 9; 
            END ELSE BEGIN sym := no_Sym; EXIT; END;
         9: BEGIN sym := 5; EXIT; END;
        10: IF ((ch >= '0') AND (ch <= '9')) THEN BEGIN 
            END ELSE IF ((ch >= 'A') AND (ch <= 'F')) THEN BEGIN state := 11; 
            END ELSE IF (ch = 'H') THEN BEGIN state := 2; 
            END ELSE IF (ch = '.') THEN BEGIN state := 3; 
            END ELSE IF (ch = 'X') THEN BEGIN state := 7; 
            END ELSE BEGIN sym := 2; EXIT; END;
        11: IF ((ch >= '0') AND (ch <= '9') OR
               (ch >= 'A') AND (ch <= 'F')) THEN BEGIN 
            END ELSE IF (ch = 'H') THEN BEGIN state := 2; 
            END ELSE IF (ch = 'X') THEN BEGIN state := 7; 
            END ELSE BEGIN sym := no_Sym; EXIT; END;
        12: IF (ch = '.') THEN BEGIN state := 36; 
            END ELSE BEGIN sym := 6; EXIT; END;
        13: BEGIN sym := 10; EXIT; END;
        14: BEGIN sym := 11; EXIT; END;
        15: BEGIN sym := 12; EXIT; END;
        16: IF (ch = '=') THEN BEGIN state := 32; 
            END ELSE BEGIN sym := 14; EXIT; END;
        17: BEGIN sym := 15; EXIT; END;
        18: BEGIN sym := 19; EXIT; END;
        19: BEGIN sym := 20; EXIT; END;
        20: BEGIN sym := 21; EXIT; END;
        21: BEGIN sym := 22; EXIT; END;
        22: IF (ch = '=') THEN BEGIN state := 23; 
            END ELSE BEGIN sym := 23; EXIT; END;
        23: BEGIN sym := 24; EXIT; END;
        24: IF (ch = '=') THEN BEGIN state := 25; 
            END ELSE BEGIN sym := 25; EXIT; END;
        25: BEGIN sym := 26; EXIT; END;
        26: BEGIN sym := 29; EXIT; END;
        27: BEGIN sym := 30; EXIT; END;
        28: BEGIN sym := 31; EXIT; END;
        29: BEGIN sym := 32; EXIT; END;
        30: BEGIN sym := 33; EXIT; END;
        31: BEGIN sym := 34; EXIT; END;
        32: BEGIN sym := 39; EXIT; END;
        33: BEGIN sym := 40; EXIT; END;
        34: BEGIN sym := 41; EXIT; END;
        35: BEGIN sym := 42; EXIT; END;
        36: BEGIN sym := 43; EXIT; END;
        37: BEGIN sym := 52; EXIT; END;
        38: BEGIN sym := 0; ch := #0; DEC(bp); EXIT END;
      ELSE BEGIN sym := no_Sym; EXIT (*NextCh already done*) END;
      END
    END
  END;

PROCEDURE GetString (pos: LONGINT; len: INTEGER; VAR s: STRING);
  VAR
    i: INTEGER;
    p: LONGINT;
  BEGIN
    IF len > 255 THEN len := 255;
    p := pos; i := 1;
    WHILE i <= len DO BEGIN
      s[i] := CharAt(p); INC(i); INC(p)
    END;
    s[0] := CHR(len);
  END;

PROCEDURE GetName (pos: LONGINT; len: INTEGER; VAR s: STRING);
  VAR
    i: INTEGER;
    p: LONGINT;
  BEGIN
    IF len > 255 THEN len := 255;
    p := pos; i := 1;
    WHILE i <= len DO BEGIN
      s[i] := CurrentCh(p); INC(i); INC(p)
    END;
    s[0] := CHR(len);
  END;

FUNCTION CharAt (pos: LONGINT): CHAR;
  VAR
    ch : CHAR;
  BEGIN
    IF pos >= inputLen THEN BEGIN CharAt := EF; EXIT; END;
    ch := buf[pos DIV LBlkSize]^[pos MOD LBlkSize];
    IF ch <> eof THEN CharAt := ch ELSE CharAt := EF
  END;

FUNCTION CapChAt (pos: LONGINT): CHAR; FAR;
  VAR
    ch : CHAR;
  BEGIN
    IF pos >= inputLen THEN BEGIN CapChAt := EF; EXIT; END;
    ch := upcase(buf[pos DIV LBlkSize]^[pos MOD LBlkSize]);
    IF ch <> eof THEN CapChAt := ch ELSE CapChAt := EF
  END;

PROCEDURE _Reset;
  VAR
    len: LONGINT;
    i, read: INTEGER;
  BEGIN (*assert: src has been opened*)
    len := FileSize(src); i := 0; inputLen := len;
    WHILE len > LBlkSize DO BEGIN
      NEW(buf[i]);
      read := BlkSize; BlockRead(src, buf[i]^, read);
      len := len - read; INC(i)
    END;
    NEW(buf[i]);
    read := len; BlockRead(src, buf[i]^, read);
    buf[i]^[read] := EF;
    curLine := 1; lineStart := -2; bp := -1;
    oldEols := 0; apx := 0; errors := 0;
    NextCh;
  END;

BEGIN
  CurrentCh := CharAt;
  start[  0] := 38; start[  1] := 39; start[  2] := 39; start[  3] := 39; 
  start[  4] := 39; start[  5] := 39; start[  6] := 39; start[  7] := 39; 
  start[  8] := 39; start[  9] := 39; start[ 10] := 39; start[ 11] := 39; 
  start[ 12] := 39; start[ 13] := 39; start[ 14] := 39; start[ 15] := 39; 
  start[ 16] := 39; start[ 17] := 39; start[ 18] := 39; start[ 19] := 39; 
  start[ 20] := 39; start[ 21] := 39; start[ 22] := 39; start[ 23] := 39; 
  start[ 24] := 39; start[ 25] := 39; start[ 26] := 39; start[ 27] := 39; 
  start[ 28] := 39; start[ 29] := 39; start[ 30] := 39; start[ 31] := 39; 
  start[ 32] := 39; start[ 33] := 39; start[ 34] :=  8; start[ 35] := 21; 
  start[ 36] := 39; start[ 37] := 39; start[ 38] := 31; start[ 39] := 39; 
  start[ 40] := 29; start[ 41] := 30; start[ 42] := 14; start[ 43] := 26; 
  start[ 44] := 17; start[ 45] := 27; start[ 46] := 12; start[ 47] := 28; 
  start[ 48] := 10; start[ 49] := 10; start[ 50] := 10; start[ 51] := 10; 
  start[ 52] := 10; start[ 53] := 10; start[ 54] := 10; start[ 55] := 10; 
  start[ 56] := 10; start[ 57] := 10; start[ 58] := 16; start[ 59] := 13; 
  start[ 60] := 22; start[ 61] := 15; start[ 62] := 24; start[ 63] := 39; 
  start[ 64] := 39; start[ 65] :=  1; start[ 66] :=  1; start[ 67] :=  1; 
  start[ 68] :=  1; start[ 69] :=  1; start[ 70] :=  1; start[ 71] :=  1; 
  start[ 72] :=  1; start[ 73] :=  1; start[ 74] :=  1; start[ 75] :=  1; 
  start[ 76] :=  1; start[ 77] :=  1; start[ 78] :=  1; start[ 79] :=  1; 
  start[ 80] :=  1; start[ 81] :=  1; start[ 82] :=  1; start[ 83] :=  1; 
  start[ 84] :=  1; start[ 85] :=  1; start[ 86] :=  1; start[ 87] :=  1; 
  start[ 88] :=  1; start[ 89] :=  1; start[ 90] :=  1; start[ 91] := 18; 
  start[ 92] := 39; start[ 93] := 19; start[ 94] := 20; start[ 95] := 39; 
  start[ 96] := 39; start[ 97] :=  1; start[ 98] :=  1; start[ 99] :=  1; 
  start[100] :=  1; start[101] :=  1; start[102] :=  1; start[103] :=  1; 
  start[104] :=  1; start[105] :=  1; start[106] :=  1; start[107] :=  1; 
  start[108] :=  1; start[109] :=  1; start[110] :=  1; start[111] :=  1; 
  start[112] :=  1; start[113] :=  1; start[114] :=  1; start[115] :=  1; 
  start[116] :=  1; start[117] :=  1; start[118] :=  1; start[119] :=  1; 
  start[120] :=  1; start[121] :=  1; start[122] :=  1; start[123] := 34; 
  start[124] := 37; start[125] := 35; start[126] := 33; start[127] := 39; 
  start[128] := 39; start[129] := 39; start[130] := 39; start[131] := 39; 
  start[132] := 39; start[133] := 39; start[134] := 39; start[135] := 39; 
  start[136] := 39; start[137] := 39; start[138] := 39; start[139] := 39; 
  start[140] := 39; start[141] := 39; start[142] := 39; start[143] := 39; 
  start[144] := 39; start[145] := 39; start[146] := 39; start[147] := 39; 
  start[148] := 39; start[149] := 39; start[150] := 39; start[151] := 39; 
  start[152] := 39; start[153] := 39; start[154] := 39; start[155] := 39; 
  start[156] := 39; start[157] := 39; start[158] := 39; start[159] := 39; 
  start[160] := 39; start[161] := 39; start[162] := 39; start[163] := 39; 
  start[164] := 39; start[165] := 39; start[166] := 39; start[167] := 39; 
  start[168] := 39; start[169] := 39; start[170] := 39; start[171] := 39; 
  start[172] := 39; start[173] := 39; start[174] := 39; start[175] := 39; 
  start[176] := 39; start[177] := 39; start[178] := 39; start[179] := 39; 
  start[180] := 39; start[181] := 39; start[182] := 39; start[183] := 39; 
  start[184] := 39; start[185] := 39; start[186] := 39; start[187] := 39; 
  start[188] := 39; start[189] := 39; start[190] := 39; start[191] := 39; 
  start[192] := 39; start[193] := 39; start[194] := 39; start[195] := 39; 
  start[196] := 39; start[197] := 39; start[198] := 39; start[199] := 39; 
  start[200] := 39; start[201] := 39; start[202] := 39; start[203] := 39; 
  start[204] := 39; start[205] := 39; start[206] := 39; start[207] := 39; 
  start[208] := 39; start[209] := 39; start[210] := 39; start[211] := 39; 
  start[212] := 39; start[213] := 39; start[214] := 39; start[215] := 39; 
  start[216] := 39; start[217] := 39; start[218] := 39; start[219] := 39; 
  start[220] := 39; start[221] := 39; start[222] := 39; start[223] := 39; 
  start[224] := 39; start[225] := 39; start[226] := 39; start[227] := 39; 
  start[228] := 39; start[229] := 39; start[230] := 39; start[231] := 39; 
  start[232] := 39; start[233] := 39; start[234] := 39; start[235] := 39; 
  start[236] := 39; start[237] := 39; start[238] := 39; start[239] := 39; 
  start[240] := 39; start[241] := 39; start[242] := 39; start[243] := 39; 
  start[244] := 39; start[245] := 39; start[246] := 39; start[247] := 39; 
  start[248] := 39; start[249] := 39; start[250] := 39; start[251] := 39; 
  start[252] := 39; start[253] := 39; start[254] := 39; start[255] := 39; 
  Error := Err; LBlkSize := BlkSize; lastCh := EF;
  firstComment := NIL; seenComment := FALSE;
END. (* OberonS *)
